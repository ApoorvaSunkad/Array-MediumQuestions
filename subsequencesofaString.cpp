/*
You are given a string 'STR' containing lowercase English letters from a to z 
inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

A Subsequence of a string is the one which is generated by deleting 0 or more 
letters from the string and keeping the rest of the letters in the same order.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10 
1 <=  |STR| <= 16

Where |STR| represents the length of the string 'STR'.

Time Limit: 1 sec
Sample Input 1:
1 
abc
Sample Output 1:
a ab abc ac b bc c
Explanation of sample input 1:
All possible subsequences of abc are :  
“a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”
Sample Input 2:
1
bbb
Sample Output 2:
b b b bb bb bb bbb

*/

#include<bits/stdc++.h>
using namespace std;

// Recursive Solution
// Time complexity : O(N*(2^N))
// Space complexity : O(N*(2^N))

void generateSubsequences(string str,int index,string output,vector<string>&v){
	//Base case
	int len = str.length();

	if(index>=len){
		//No need of "" empty string here
		if(output.length()>0){
			v.push_back(output);
		}
		return;
	}
	//include
	char c = str[index];
	output.push_back(c);
	generateSubsequences(str,index+1,output,v);

	//exclude
	output.pop_back();
	generateSubsequences(str,index+1,output,v);

}
vector<string> subsequences(string str){
	
	vector<string>v;

	string output = "";

	int index = 0;

	generateSubsequences(str,index,output,v);
	return v;
	
}